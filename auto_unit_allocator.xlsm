' SHEETS REQUIRED:
' 1. PastUnits [Name, Unit]
' 2. ModuleGrades [Name, Module, Grade]
' 3. UnitRequirements [Unit, Module Preference (CSV format), Quota]
' 4. NewAssignments [Name, New Unit]

Sub AssignUnits()
    ' DECLARATIONS:
    ' Worksheets
    Dim wsNewAssgn As Worksheet
    Dim wsPastUnits As Worksheet
    Dim wsMods As Worksheet
    Dim wsUnitReq As Worksheet
    
    ' Last Worksheet Rows
    Dim lastRowNewAssgn As Long
    Dim lastRowPastUnits As Long
    Dim lastRowMods As Long
    Dim lastRowUnitReq As Long
    
    ' Looping Variables
    Dim i As Long, j As Long
    
    ' Required Dictionaries
    Dim pastUnitsDict As Object
    Dim newAssgnDict As Object
    Dim modsTakenDict As Object
    Dim availUnitsDict As Object
    Dim unitReqDict As Object
    Dim unitQuotaDict As Object
    
    
    ' SETTING VARIABLES:
    ' Set worksheets
    Set wsNewAssgn = ThisWorkbook.Sheets("NewAssignments")
    Set wsPastUnits = ThisWorkbook.Sheets("PastUnits")
    Set wsMods = ThisWorkbook.Sheets("ModuleGrades")
    Set wsUnitReq = ThisWorkbook.Sheets("UnitRequirements")
    
    ' Set Dictionaries
    Set pastUnitsDict = CreateObject("Scripting.Dictionary")
    Set newAssgnDict = CreateObject("Scripting.Dictionary")
    Set modsTakenDict = CreateObject("Scripting.Dictionary")
    Set availUnitsDict = CreateObject("Scripting.Dictionary")
    Set unitReqDict = CreateObject("Scripting.Dictionary")
    Set unitQuotaDict = CreateObject("Scripting.Dictionary")
    
    ' Set last worksheet rows
    lastRowNewAssgn = wsNewAssgn.Cells(wsNewAssgn.Rows.Count, "A").End(xlUp).Row
    lastRowPastUnits = wsPastUnits.Cells(wsPastUnits.Rows.Count, "A").End(xlUp).Row
    lastRowMods = wsMods.Cells(wsMods.Rows.Count, "A").End(xlUp).Row
    lastRowUnitReq = wsUnitReq.Cells(wsUnitReq.Rows.Count, "A").End(xlUp).Row
    
    
    ' INITIALIZING DICTIONARIES:
    ' Populate newAssgnDict with names from NewAssgn worksheet
    For Each cell In wsNewAssgn.Range("A2:A" & lastRowNewAssgn) ' Assume names are in Col A
        If IsEmpty(cell.Offset(0, 1)) Then
            newAssgnDict.Add cell.Value, "0"
        Else
            newAssgnDict.Add cell.Value, cell.Offset(0, 1).Value & "!"
        End If
    Next cell
    
    ' Populate pastUnitsDict
    Dim unitName As String
    Dim personName As String
    Dim unitArr As String
    For Each cell In wsPastUnits.Range("A2:A" & lastRowPastUnits) ' Assume names are in Col A
        personName = cell.Value
        unitName = cell.Offset(0, 1).Value ' Gets the value in the column to the right
        If Not pastUnitsDict.Exists(personName) Then
            ' Create a new person key, or add the unit to their name if they already exist in the dict
            pastUnitsDict(personName) = unitName
        Else
            ' If the person already exists in the dict, then add the new past unit to their existing list
            unitArr = pastUnitsDict(personName)
            unitArr = unitArr & "," & unitName
            pastUnitsDict(personName) = unitArr
        End If
    Next cell
    
    ' Populate unitReq and unitQuota dictionaries
    Dim unitReq As String
    Dim unitQuota As Long
    For Each cell In wsUnitReq.Range("A2:A" & lastRowUnitReq)
        unitName = cell.Value
        unitReq = cell.Offset(0, 1).Value
        unitQuota = cell.Offset(0, 2).Value
        ' Add keys and values to unitReq and unitQuota dictionaries
        unitReqDict.Add unitName, unitReq
        unitQuotaDict.Add unitName, unitQuota
    Next cell
    
    ' Populate modsTaken dictionary
    Dim moduleTaken As String
    Dim modsTaken As String
    Dim modsArr() As String
    For Each cell In wsMods.Range("A2:A" & lastRowMods)
        personName = cell.Value
        moduleTaken = cell.Offset(0, 1).Value
        If Not modsTakenDict.Exists(personName) Then
            ' If the person has not yet been logged in the dictionary, add their name
            modsTakenDict(personName) = moduleTaken
        Else
            ' For those who already have entries in the dictionary, add on to their list of mods
            modsTaken = modsTakenDict(personName)
            modsTaken = modsTaken & "," & moduleTaken
            modsTakenDict(personName) = modsTaken
        End If
    Next cell
    
    
    ' FINDING POSSIBLE UNITS FOR EACH PERSON:
    ' Create a dictionary of possible units that each person can be posted to (using newAssgnDict)
    Dim name As Variant, unit As Variant, currUnit As Variant
    Dim unitMod As Variant, personMod As Variant
    Dim possibleUnits As String
    Dim pastUnits As String
    Dim pastUnitsArr() As String
    Dim moduleOK As Boolean
    Dim personMods() As String
    Dim unitMods() As String
    For Each name In newAssgnDict.keys()
        For Each unit In unitQuotaDict.keys()
            moduleOK = False ' Initialize moduleOK to be False first
            pastUnits = pastUnitsDict(name)
            pastUnitsArr = Split(pastUnits, ",")
            If Not IsInArray(pastUnitsArr, CStr(unit)) Then
                ' Check if the current unit's module requests are fulfilled by the current person's mods taken
                If unitReqDict(unit) = "" Then
                    moduleOK = True
                Else
                    unitMods = Split(unitReqDict(unit), ",")
                    personMods = Split(modsTakenDict(name), ",")
                    ' Loop through unitMods and personMods and confirm if there are any matches
                    For Each unitMod In unitMods
                        For Each personMod In personMods
                            personMod = Trim(personMod)
                            unitMod = Trim(unitMod)
                            If UCase(personMod) Like UCase("*" & unitMod & "*") Then
                                moduleOK = True
                                Exit For
                            End If
                        Next personMod
                        
                        If moduleOK Then
                            Exit For
                        End If
                    Next unitMod
                End If
                If moduleOK Then
                    If newAssgnDict(name) = "0" Then
                        ' If we haven't generated a list of possible units for someone, then enter the first possible one
                        newAssgnDict(name) = unit
                    Else
                        ' Add on to the existing list of possible units for a particular person
                        possibleUnits = newAssgnDict(name)
                        possibleUnits = possibleUnits & "," & unit
                        newAssgnDict(name) = possibleUnits
                    End If
                End If
            End If
        Next unit
    Next name
    
    ' Add probationary units behind each name's list of suitable units
    Dim noUnit As Boolean
    Dim nameKey As Variant, unitKey As Variant
    Dim updateUnits As String
    Dim pastUnitsArr1() As String
    For Each nameKey In newAssgnDict.keys()
        If newAssgnDict(nameKey) = "0" Then
            newAssgnDict(nameKey) = "poo"
        Else
            updateUnits = newAssgnDict(nameKey)
            updateUnits = updateUnits & "poo"
            newAssgnDict(nameKey) = updateUnits
        End If
        For Each unitKey In unitQuotaDict.keys()
            pastUnitsArr1 = Split(pastUnitsDict(nameKey), ",")
            If Not IsInArray(pastUnitsArr1, CStr(unitKey)) Then
                If Not newAssgnDict(nameKey) Like "*" & unitKey & "*" Then
                    If newAssgnDict(nameKey) Like "*poo" Then
                        newAssgnDict(nameKey) = newAssgnDict(nameKey) & unitKey
                    Else
                        updateUnits = newAssgnDict(nameKey)
                        updateUnits = updateUnits & "," & unitKey
                        newAssgnDict(nameKey) = updateUnits
                    End If
                End If
            End If
        Next unitKey
    Next nameKey
    
    
    ' UNIT ALLOCATION:
    Dim prefUnits() As String
    Dim maxUnit As String
    Dim remNum As Long
    Dim qwerty As String, temp As String, yes() As String
    Dim length As Long
    Dim currUnits() As String, cfmUnit As String, tmp As String
    
    ' Confirm pre-allocated units
    For Each name In newAssgnDict.keys()
        If newAssgnDict(name) Like "*!*" Then
            yes = Split(newAssgnDict(name), ",")
            temp = Replace(yes(0), "!", "")
            If unitQuotaDict(temp) > 0 Then
                newAssgnDict(name) = temp
                unitQuotaDict(temp) = unitQuotaDict(temp) - 1
            Else
                newAssgnDict(name) = Replace(newAssgnDict(name), "!", "")
            End If
        End If
    Next name
    
    ' Confirm units to all those who have only one unit suitable and edit remaining quotas accordingly
    For Each name In newAssgnDict.keys()
        If newAssgnDict(name) Like "*poo*" Then
            If Not newAssgnDict(name) Like "*[!p]poo[!p]*" Then
                tmp = Replace(newAssgnDict(name), "poo", "")
                currUnits = Split(tmp, ",")
                length = UBound(currUnits) - LBound(currUnits) + 1
                If length = 1 Then
                    cfmUnit = CStr(tmp)
                    If unitQuotaDict(cfmUnit) > 0 Then
                        unitQuotaDict(cfmUnit) = unitQuotaDict(cfmUnit) - 1
                        newAssgnDict(name) = cfmUnit
                    Else
                        newAssgnDict(name) = "sadge"
                    End If
                End If
            End If
        End If
    Next name
    
    ' Assign units to the rest of the people who have available suitable units
    ' Use the remaining quota for each unit as a priority marker
    For Each name In newAssgnDict.keys()
        If newAssgnDict(name) Like "*poo*" Then
            currUnits = Split(newAssgnDict(name), "poo")
            prefUnits = Split(currUnits(0), ",")
            length = UBound(prefUnits) - LBound(prefUnits) + 1
            If length = 1 Then
                cfmUnit = prefUnits(0)
                If unitQuotaDict(cfmUnit) > 0 Then
                    unitQuotaDict(cfmUnit) = unitQuotaDict(cfmUnit) - 1
                    newAssgnDict(name) = cfmUnit
                Else
                    newAssgnDict(name) = "sadge"
                End If
            End If
        End If
    Next name
    
    For Each name In newAssgnDict.keys()
        If newAssgnDict(name) Like "*poo*" Then
            currUnits = Split(newAssgnDict(name), "poo")
            prefUnits = Split(currUnits(0), ",")
            remNum = 1
            maxUnit = "sadge"
            For Each unitKey In prefUnits
                If unitQuotaDict(unitKey) >= remNum Then
                    maxUnit = unitKey
                    remNum = unitQuotaDict(unitKey)
                End If
            Next unitKey
            If Not maxUnit = "sadge" Then
                unitQuotaDict(maxUnit) = unitQuotaDict(maxUnit) - 1
                newAssgnDict(name) = maxUnit
            End If
        End If
    Next name
    
    ' Deal with the remaining people who don't have any suitable units
    ' Post them to units that they have yet to go to before
    For Each name In newAssgnDict.keys()
        If newAssgnDict(name) Like "*poo*" Then
            currUnits = Split(newAssgnDict(name), "poo")
            prefUnits = Split(currUnits(1), ",")
            length = UBound(prefUnits) - LBound(prefUnits) + 1
            cfmUnit = "sadge"
            If length = 1 Then
                If unitQuotaDict(prefUnits(0)) > 0 And Not cfmUnit = "sadge" Then
                    cfmUnit = prefUnits(0)
                    unitQuotaDict(cfmUnit) = unitQuotaDict(cfmUnit) - 1
                    newAssgnDict(name) = cfmUnit
                Else
                    newAssgnDict(name) = "sadge"
                End If
            End If
        End If
    Next name
    
    For Each name In newAssgnDict.keys()
        If newAssgnDict(name) Like "*poo*" Then
            currUnits = Split(newAssgnDict(name), "poo")
            prefUnits = Split(currUnits(1), ",")
            maxUnit = "sadge"
            remNum = 0
            For Each unitKey In prefUnits
                If unitQuotaDict(unitKey) > remNum Then
                    maxUnit = unitKey
                    remNum = unitQuotaDict(unitKey)
                End If
            Next unitKey
            unitQuotaDict(maxUnit) = unitQuotaDict(maxUnit) - 1
            newAssgnDict(name) = maxUnit
        End If
    Next name
    
    ' For those we are unable to find units for, assign them based on the remaining quota
    For Each name In newAssgnDict.keys()
        If newAssgnDict(name) = "sadge" Then
            For Each unit In unitQuotaDict.keys()
                If unitQuotaDict(unit) > 0 Then
                    newAssgnDict(name) = unit
                    unitQuotaDict(unit) = unitQuotaDict(name) - 1
                End If
            Next unit
        End If
    Next name
    
    
    ' DEBUGGER
    Dim k As Variant, p As Variant
    Debug.Print (vbNewLine & "--- NEXT ---")
    For Each k In newAssgnDict.keys()
        Debug.Print (k & ": " & newAssgnDict(k))
    Next k
    Debug.Print (vbNewLine)
    For Each p In unitQuotaDict.keys()
        Debug.Print (p & ": " & unitQuotaDict(p))
    Next p
    
       
    ' OUTPUT:
    ' Print results out to NewAssignments sheet
    Dim cellLooper As Variant
    For Each cellLooper In wsNewAssgn.Range("A2:A" & lastRowNewAssgn)
        cellLooper.Offset(0, 1).Value = newAssgnDict(Trim(cellLooper.Value))
    Next cellLooper
    
    
    ' CLEAN UP
    Set newAssgnDict = Nothing
    Set pastUnitsDict = Nothing
    Set newAssgnDict = Nothing
    Set modsTakenDict = Nothing
    Set availUnitsDict = Nothing
    Set unitReqDict = Nothing
    Set unitQuotaDict = Nothing
    Set wsNewAssgn = Nothing
    Set wsPastUnits = Nothing
    Set wsMods = Nothing
    Set wsUnitReq = Nothing
End Sub


Function IsInArray(arr() As String, target As String):
    Dim x As Variant
    For Each x In arr
        If target = x Then
            IsInArray = True
            Exit Function
        End If
    Next x
    IsInArray = False
End Function
