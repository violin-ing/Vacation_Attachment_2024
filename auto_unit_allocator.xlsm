Sub AssignUnits()
    ' DECLARATIONS:
    ' Worksheets
    Dim wsNewAssgn As Worksheet
    Dim wsPastUnits As Worksheet
    Dim wsMods As Worksheet
    Dim wsUnitReq As Worksheet
    
    ' Last Worksheet Rows
    Dim lastRowNewAssgn As Long
    Dim lastRowPastUnits As Long
    Dim lastRowMods As Long
    Dim lastRowUnitReq As Long
    
    ' Looping Variables
    Dim i As Long, j As Long
    
    ' Required Dictionaries
    Dim pastUnitsDict As Object
    Dim newAssgnDict As Object
    Dim modsTakenDict As Object
    Dim availUnitsDict As Object
    Dim unitReqDict As Object
    Dim unitQuotaDict As Object
    
    
    ' SETTING VARIABLES:
    ' Set worksheets
    Set wsNewAssgn = ThisWorkbook.Sheets("NewAssignments")
    Set wsPastUnits = ThisWorkbook.Sheets("PastUnits")
    Set wsMods = ThisWorkbook.Sheets("ModuleGrades")
    Set wsUnitReq = ThisWorkbook.Sheets("UnitRequirements")
    
    ' Set Dictionaries
    Set pastUnitsDict = CreateObject("Scripting.Dictionary")
    Set newAssgnDict = CreateObject("Scripting.Dictionary")
    Set modsTakenDict = CreateObject("Scripting.Dictionary")
    Set availUnitsDict = CreateObject("Scripting.Dictionary")
    Set unitReqDict = CreateObject("Scripting.Dictionary")
    Set unitQuotaDict = CreateObject("Scripting.Dictionary")
    
    ' Set last worksheet rows
    lastRowNewAssgn = wsNewAssgn.Cells(wsNewAssgn.Rows.Count, "A").End(xlUp).Row
    lastRowPastUnits = wsPastUnits.Cells(wsPastUnits.Rows.Count, "A").End(xlUp).Row
    lastRowMods = wsMods.Cells(wsMods.Rows.Count, "A").End(xlUp).Row
    lastRowUnitReq = wsUnitReq.Cells(wsUnitReq.Rows.Count, "A").End(xlUp).Row
    
    
    ' INITIALIZING DICTIONARIES:
    ' Populate newAssgnDict with names from NewAssgn worksheet
    For Each cell In wsNewAssgn.Range("A2:A" & lastRowNewAssgn) ' Assume names are in Col A
        newAssgnDict.Add cell.Value, "0"
    Next cell
    
    ' Populate pastUnitsDict
    Dim unitName As String
    Dim personName As String
    Dim unitArr As String
    For Each cell In wsPastUnits.Range("A2:A" & lastRowPastUnits) ' Assume names are in Col A
        personName = cell.Value
        unitName = cell.Offset(0, 1).Value ' Gets the value in the column to the right
        If Not pastUnitsDict.Exists(personName) Then
            ' Create a new person key, or add the unit to their name if they already exist in the dict
            pastUnitsDict(personName) = unitName
        Else
            ' If the person already exists in the dict, then add the new past unit to their existing list
            unitArr = pastUnitsDict(personName)
            unitArr = unitArr & "," & unitName
            pastUnitsDict(personName) = unitArr
        End If
    Next cell
    
    ' Populate unitReq and unitQuota dictionaries
    Dim unitReq As String
    Dim unitQuota As Long
    For Each cell In wsUnitReq.Range("A2:A" & lastRowUnitReq)
        unitName = cell.Value
        unitReq = cell.Offset(0, 1).Value
        unitQuota = cell.Offset(0, 2).Value
        ' Add keys and values to unitReq and unitQuota dictionaries
        unitReqDict.Add unitName, unitReq
        unitQuotaDict.Add unitName, unitQuota
    Next cell
    
    ' Populate modsTaken dictionary
    Dim moduleTaken As String
    Dim modsTaken As String
    Dim modsArr() As String
    For Each cell In wsMods.Range("A2:A" & lastRowMods)
        personName = cell.Value
        moduleTaken = cell.Offset(0, 1).Value
        If Not modsTakenDict.Exists(personName) Then
            ' If the person has not yet been logged in the dictionary, add their name
            modsTakenDict(personName) = moduleTaken
        Else
            ' For those who already have entries in the dictionary, add on to their list of mods
            modsTaken = modsTakenDict(personName)
            modsTaken = modsTaken & "," & moduleTaken
            modsTakenDict(personName) = modsTaken
        End If
    Next cell
    
    ' Create a dictionary of possible units that each person can be posted to (using newAssgnDict)
    Dim name As Variant, unit As Variant
    Dim unitMod As Variant, personMod As Variant
    Dim possibleUnits As String
    Dim pastUnits As String
    Dim pastUnitsArr() As String
    Dim moduleOK As Boolean
    Dim personMods() As String
    Dim unitMods() As String
    For Each name In newAssgnDict.Keys()
        For Each unit In unitQuotaDict.Keys()
            moduleOK = False ' Initialize moduleOK to be False first
            pastUnits = pastUnitsDict(name)
            pastUnitsArr = Split(pastUnits, ",")
            If Not IsInArray(pastUnitsArr, CStr(unit)) Then
                ' Check if the current unit's module requests are fulfilled by the current person's mods taken
                If Not unitReqDict.Exists(unit) Then
                    moduleOK = True
                Else
                    unitMods = Split(unitReqDict(unit), ",")
                    personMods = Split(modsTakenDict(name), ",")
                    ' Loop through unitMods and personMods and confirm if there are any matches
                    For Each unitMod In unitMods
                        For Each personMod In personMods
                            personMod = Trim(personMod)
                            unitMod = Trim(unitMod)
                            If UCase(personMod) Like UCase("*" & unitMod & "*") Then
                                moduleOK = True
                                Exit For
                            End If
                        Next personMod
                        
                        If moduleOK Then
                            Exit For
                        End If
                    Next unitMod
                End If
                
                If moduleOK Then
                    If newAssgnDict(name) = "0" Then
                        ' If we haven't generated a list of possible units for someone, then enter the first possible one
                        newAssgnDict(name) = unit
                    Else
                        ' Add on to the existing list of possible units for a particular person
                        possibleUnits = newAssgnDict(name)
                        possibleUnits = possibleUnits & "," & unit
                        newAssgnDict(name) = possibleUnits
                    End If
                End If
            End If
        Next unit
    Next name
    
    
    ' Print results out to NewAssignments sheet
    Dim cellLooper As Variant
    For Each cellLooper In wsNewAssgn.Range("A2:A" & lastRowNewAssgn)
        cellLooper.Offset(0, 1).Value = newAssgnDict(Trim(cellLooper.Value))
    Next cellLooper
End Sub


Function IsInArray(arr() As String, target As String):
    Dim x As Variant
    For Each x In arr
        If target = x Then
            IsInArray = True
            Exit Function
        End If
    Next x
    IsInArray = False
End Function
